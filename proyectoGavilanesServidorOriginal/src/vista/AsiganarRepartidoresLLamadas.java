/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import br.com.adilson.util.Extenso;
import br.com.adilson.util.PrinterMatrix;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import conexion.*;
import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleDos1;
import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleTres;
import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleUno;
import static vista.VistaOrdenesPorLLamadasVentana1.txtLocalidad;
import static vista.VistaOrdenesPorLLamadasVentana1.txtNombre;
import static vista.VistaOrdenesPorLLamadasVentana1.txtReferencias;
import static vista.VistaOrdenesPorLLamadasVentana1.txtTelefono;

import conexion.ConexionBD;

/**
 *
 * @author Garci
 */
public class AsiganarRepartidoresLLamadas extends javax.swing.JInternalFrame {

    /**
     * Creates new form AsiganarRepartidoresLLamadas
     */
    public AsiganarRepartidoresLLamadas() {
        initComponents();
        ConexionBD objCBD = new ConexionBD();
        txtNumeroOrden.setEditable(false);
        txtNombreDelCliente.setEditable(false);
        txtDireccion.setEditable(false);
        txtTelefono.setEditable(false);
        txtNombreRepartidor.setEditable(false);
        txtTotal.setEditable(false);
        txtNumeroOrden.setEditable(false);
        txtDireccion.setLineWrap(true);
        txtO.setLineWrap(true);

        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_LlenarCBOrden()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.getCdr();
        try {
            while (cdr.next()) {
                this.cmbSeleccionarOrden.addItem(cdr.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "La consulta no se ha podido ejecutar. Razón SQL: " + ex, "EXCEPCIÓN SQL", JOptionPane.ERROR_MESSAGE);
        } finally {

            objCBD.cerrarConexion();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAsignarRepartidor = new javax.swing.JTable();
        btnImprimirTicket = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        cmbSeleccionarOrden = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnBuscarRepartidor = new javax.swing.JButton();
        txtNumeroOrden = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNombreDelCliente = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombreRepartidor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtO = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("ASIGNAR REPARTOS"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ASIGNAR REPARTIDOR");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        jTableAsignarRepartidor = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTableAsignarRepartidor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID ORDEN", "ID PRODUCTO", "NOMBRE PRODUCTO", "CANTIDAD", "PRECIO", "FECHA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAsignarRepartidor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableAsignarRepartidor);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 1050, 170));

        btnImprimirTicket.setText("ASIGNAR REPARTIDOR ");
        btnImprimirTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirTicketActionPerformed(evt);
            }
        });
        jPanel2.add(btnImprimirTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 460, 270, 60));
        jPanel2.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 410, 154, 20));

        cmbSeleccionarOrden.setToolTipText("");
        cmbSeleccionarOrden.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeleccionarOrdenItemStateChanged(evt);
            }
        });
        cmbSeleccionarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSeleccionarOrdenActionPerformed(evt);
            }
        });
        jPanel2.add(cmbSeleccionarOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 60, 190, -1));

        jLabel4.setText("NOMBRE CLIENTE:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 110, -1));

        btnBuscarRepartidor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar2.png"))); // NOI18N
        btnBuscarRepartidor.setText("BUSCAR REPARTIDOR ");
        btnBuscarRepartidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarRepartidorActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarRepartidor, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 240, -1));
        jPanel2.add(txtNumeroOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 160, -1));

        jLabel6.setText("SELECCIONAR ORDEN:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 140, -1));

        jLabel7.setText("TELÉFONO:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, 90, -1));
        jPanel2.add(txtNombreDelCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 160, -1));
        jPanel2.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 180, 166, -1));

        jLabel8.setText("DIRECCIÓN DEL CLIENTE:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, 150, -1));

        jLabel9.setText("NÚMERO DE ORDEN:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 140, -1));

        txtNombreRepartidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreRepartidorActionPerformed(evt);
            }
        });
        jPanel2.add(txtNombreRepartidor, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 410, 290, -1));

        jLabel10.setText("TOTAL: $$");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 410, -1, -1));

        jLabel11.setText("ASIGNAR REPARTIDOR:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, -1, 20));

        jLabel2.setText("OBSERVACIONES:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, 120, 30));

        txtO.setColumns(20);
        txtO.setRows(5);
        jScrollPane2.setViewportView(txtO);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 460, 260, 50));

        txtDireccion.setColumns(20);
        txtDireccion.setRows(5);
        jScrollPane3.setViewportView(txtDireccion);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, 230, 70));

        jLabel3.setText("NOMBRE REPARTIDOR:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 410, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void consultarOrdenesYaAsigandas() {
        ConexionBD objCBD = new ConexionBD();
        String nombreC = String.valueOf(cmbSeleccionarOrden.getSelectedItem().toString());

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_OrdenesYaAsignadas(?)}");
        instruccionBD.add(nombreC);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {
                txtNumeroOrden.setText(cdr.getString(1));
                txtNombreDelCliente.setText(cdr.getString(2));
                txtDireccion.setText(cdr.getString(3));
                txtTelefono.setText(cdr.getString(4));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }
    }


    private void cmbSeleccionarOrdenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeleccionarOrdenItemStateChanged

        mandarDatos1();
        mandarDatos2();
    }//GEN-LAST:event_cmbSeleccionarOrdenItemStateChanged

    private void cmbSeleccionarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSeleccionarOrdenActionPerformed


    }//GEN-LAST:event_cmbSeleccionarOrdenActionPerformed

    private void btnBuscarRepartidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarRepartidorActionPerformed

        abrirListaRepartidores();

    }//GEN-LAST:event_btnBuscarRepartidorActionPerformed

    private void btnImprimirTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirTicketActionPerformed
        String orden;

        orden = txtNombreRepartidor.getText();

        if (orden.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No Ha Seleccionado Ningun Repartidor, Por Favor Hagalo");

        } else {

            try {
                registrarRepartidor();
            } catch (IOException ex) {
                Logger.getLogger(AsiganarRepartidoresLLamadas.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnImprimirTicketActionPerformed

    private void txtNombreRepartidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreRepartidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreRepartidorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarRepartidor;
    private javax.swing.JButton btnImprimirTicket;
    private javax.swing.JComboBox<String> cmbSeleccionarOrden;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAsignarRepartidor;
    public static javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextField txtNombreDelCliente;
    public static javax.swing.JTextField txtNombreRepartidor;
    private javax.swing.JTextField txtNumeroOrden;
    private javax.swing.JTextArea txtO;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void mandarDatos1() {
        ConexionBD objCBD = new ConexionBD();
        String nombreC = String.valueOf(cmbSeleccionarOrden.getSelectedItem().toString());

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_ARepallamada(?)}");
        instruccionBD.add(nombreC);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {
                txtNumeroOrden.setText(cdr.getString(1));
                txtNombreDelCliente.setText(cdr.getString(2));
                txtDireccion.setText(cdr.getString(3));
                txtTelefono.setText(cdr.getString(4));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }
        total();

    }

    private void mandarDatos2() {
        ConexionBD objCBD = new ConexionBD();
        String nombreC2 = String.valueOf(cmbSeleccionarOrden.getSelectedItem().toString());
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID ORDEN");
        modelo.addColumn("ID PRODUCTO");
        modelo.addColumn("NOMBRE PRODUCTO");
        modelo.addColumn("CANTIDAD");
        modelo.addColumn("PRECIO");
        modelo.addColumn("FECHA");

        jTableAsignarRepartidor.setModel(modelo);
        String[] datos = new String[6];

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_consultarOLlamada(?)}");
        instruccionBD.add(nombreC2);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {
                datos[0] = cdr.getString(1);
                datos[1] = cdr.getString(2);
                datos[2] = cdr.getString(3);
                datos[3] = cdr.getString(4);
                datos[4] = cdr.getString(5);
                datos[5] = cdr.getString(6);
                modelo.addRow(datos);
            }
            jTableAsignarRepartidor.setModel(modelo);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }
        total();

    }

    private void abrirListaRepartidores() {
        ListaRepartidores2 lr = new ListaRepartidores2();
        lr.setVisible(true);
    }

    private void total() {
        double suma;
        double tt = 0;
        int total = jTableAsignarRepartidor.getRowCount();
        total -= 1;

        for (int x = 0; x <= total; x++) {
            suma = Double.parseDouble(String.valueOf(jTableAsignarRepartidor.getValueAt(x, 4)));
            tt = tt + suma;
        }
        double t = tt;
        txtTotal.setText(String.valueOf(t));

    }

    public String IdOrdenesC() {
        String IdOC = "";
        ConexionBD objCBD = new ConexionBD();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_consultarIdOrdenLlamada2}");
        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {
                IdOC = cdr.getString(1);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);

        } finally {

            objCBD.cerrarConexion();
        }
        return IdOC;
    }

    int numOrdenP;
    int idPro;
    String npro;
    float cantidadPro;
    float precioP;
    String fechaN2;
    int idVC;

    private void registrarRepartidor() throws IOException {
        ConexionBD objCBD = new ConexionBD();
        String idVentaC = IdOrdenesC();
        idVC = Integer.parseInt(idVentaC);
        for (int i = 0; i < jTableAsignarRepartidor.getRowCount(); i++) {
            numOrdenP = Integer.parseInt(jTableAsignarRepartidor.getValueAt(i, 0).toString());
            idPro = Integer.parseInt(jTableAsignarRepartidor.getValueAt(i, 1).toString());
            npro = String.valueOf(jTableAsignarRepartidor.getValueAt(i, 2).toString());
            cantidadPro = Float.parseFloat(jTableAsignarRepartidor.getValueAt(i, 3).toString());
            precioP = Float.parseFloat(jTableAsignarRepartidor.getValueAt(i, 4).toString());
            fechaN2 = String.valueOf(jTableAsignarRepartidor.getValueAt(i, 5).toString());

            objCBD.realizarConexion();
            ArrayList instruccionBD = new ArrayList();
            instruccionBD.add("{call sp_insertarDL2(?,?,?,?,?,?,?,?,?,?)}");
            instruccionBD.add(txtNumeroOrden.getText());
            instruccionBD.add(txtNombreDelCliente.getText());
            instruccionBD.add(txtDireccion.getText());
            instruccionBD.add(txtTelefono.getText());
            instruccionBD.add(idPro);
            instruccionBD.add(npro);
            instruccionBD.add(cantidadPro);
            instruccionBD.add(precioP);
            instruccionBD.add(fechaN2);
            instruccionBD.add(txtNombreRepartidor.getText());

            objCBD.ejecutarABC(instruccionBD);

        }
        
        int r = JOptionPane.showConfirmDialog(null, "¿Desea Asiganar Orden al Repartidor?",
                "Mensaje de Imprensión", JOptionPane.YES_NO_OPTION);

        if (r == 0) {
             JOptionPane.showMessageDialog(null, "Orden Asignada Al Repartidor");
        objCBD.cerrarConexion();
//        generarTicketNew3();

        limpiarCampos();
        } else {
           
             JOptionPane.showMessageDialog(null, "Entendido, :D ");
        }
        
        
        
        
        
       

    }

    String fechaN;

    /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
    public void generarTicketNew3() throws IOException {
        ConexionBD objCBD = new ConexionBD();
        String direccionOfHome = txtDireccion.getText();

        int filas2 = jTableAsignarRepartidor.getRowCount();

        for (int j = 0; j < filas2; j++) {
            fechaN = String.valueOf(jTableAsignarRepartidor.getValueAt(j, 5).toString());
        }

        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);

        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize(60, 90);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printCharAtCol(1, 1, 48, "=");
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(1, 2, 10, 80, "TICKET DE REPARTIDOR ");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(2, 3, 1, 22, "N.ORDEN: " + txtNumeroOrden.getText());
        printer.printTextWrap(3, 4, 1, 60, "FECHA DEL DIA: " + fechaN);
        printer.printTextWrap(4, 4, 1, 80, "VENDEDOR: NADIA PACHECO");
        printer.printTextWrap(5, 5, 1, 80, "CLIENTE: " + txtNombreDelCliente.getText());
        printer.printTextWrap(6, 6, 1, 80, "DIRECCION: " + direccionOfHome);
        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TEL: " + txtTelefono.getText());
        printer.printTextWrap(8, 8, 1, 80, "OBSERVACIONES: " + txtO.getText());
        printer.printTextWrap(9, 9, 1, 80, "REPARTIDOR: " + txtNombreRepartidor.getText());
        printer.printCharAtCol(11, 1, 48, "=");
        printer.printTextWrap(11, 2, 2, 80, "**********PRODUCTOS ASIGNADOS**********");
        printer.printTextWrap(13, 2, 1, 50, "ID     NOMBRE     CANTIDAD    PRECIO");

        int filas = jTableAsignarRepartidor.getRowCount();

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(
                    14 + i, 2, 1, 80, jTableAsignarRepartidor.getValueAt(i, 1).toString()
                    + "          " + jTableAsignarRepartidor.getValueAt(i, 2).toString()
                    + "          " + jTableAsignarRepartidor.getValueAt(i, 3).toString()
                    + "          $" + jTableAsignarRepartidor.getValueAt(i, 4).toString());

        }

        printer.printTextWrap(17, 1, 1, 80, "TOTAL VENTA:..........................$" + txtTotal.getText());
        printer.printCharAtCol(19, 1, 48, "-");

        printer.toFile("C:\\Users\\Garci\\Desktop\\tickets\\TICKETS DE REPARTIDORES\\" + txtNumeroOrden.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Garci\\Desktop\\tickets\\TICKETS DE REPARTIDORES\\" + txtNumeroOrden.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();
        objCBD.cerrarConexion();
    }

    private void limpiarCampos() {

        txtNumeroOrden.setText(null);
        txtNombreDelCliente.setText(null);
        txtDireccion.setText(null);
        txtTelefono.setText(null);
        txtNombreRepartidor.setText(null);
        txtTotal.setText(null);
        txtO.setText(null);
        vaciaTabla2();

    }

    public void vaciaTabla2() {
        DefaultTableModel tb = (DefaultTableModel) jTableAsignarRepartidor.getModel();
        int a = jTableAsignarRepartidor.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

    }
}
