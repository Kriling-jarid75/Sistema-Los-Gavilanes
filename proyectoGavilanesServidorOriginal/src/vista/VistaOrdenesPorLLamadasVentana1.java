/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import br.com.adilson.util.Extenso;
import br.com.adilson.util.PrinterMatrix;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import conexion.ConexionBD;
import controlador.ControladorAcceso;
import controlador.ControladorPrincipal;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.ModeloAcceso;
import modelo.ModeloPrincipal;
import static vista.AsiganarRepartidoresLLamadas.txtNombreRepartidor;
import static vista.FormularioClientes2.cmbLocalidad2;
import static vista.FormularioClientes2.txtCalleDos1;
import static vista.FormularioClientes2.txtCalleTres;
import static vista.FormularioClientes2.txtCalleUno;
import static vista.FormularioClientes2.txtNombre1;
import static vista.FormularioClientes2.txtReferencias2;
import static vista.FormularioClientes2.txtTelefono;

public class VistaOrdenesPorLLamadasVentana1 extends javax.swing.JInternalFrame implements Runnable {

    ControladorAcceso controlador;
    ModeloAcceso modelo;
    VistaAcceso vista;

    DefaultTableModel modeloN = new DefaultTableModel();
    String producto;
    String direccion;
    String cliente;
    int contador;
    int r;
    int idp;
    float cant;
    float cantidadStock;
    float resta;
    int spCantidadNueva;
    float cantidadSpinner;
    float cantidadTxt;
    String valor;
    String nombre;
    String localidad;
    String calle1;
    String calle2;
    String calle3;
    String refe;
    String telefono;
    String localidades;
    String valorCantidad;
    String usuarios;
    boolean m;

    String hora, minutos, segundos, ampm;
    Calendar calendario;
    Thread h1;

    public VistaOrdenesPorLLamadasVentana1() {
        initComponents();

        Calendar calendar = new GregorianCalendar();
        int año, mes, dia;
        año = calendar.get(Calendar.YEAR);
        mes = calendar.get(Calendar.MONTH) + 1;
        dia = calendar.get(Calendar.DATE);
        txtFecha.setText(año + "-" + mes + "-" + dia);

        generarSerie();
        IdOrdenes();
        txtId_Clientes.setVisible(false);
        txtUsuarioNombre.setEditable(false);
        txtFecha.setEditable(false);

        txtUsuarioNombre.setEditable(false);
        txtUsuarioNombre.setVisible(true);
        txtUsuarioNombre.setText("Bienvenido : " + vista.txtUsuario.getText());
        h1 = new Thread(this);
        h1.start();
        txtClock.setVisible(true);
        txtClock.setEditable(false);

        txtNumeroOrden1.setVisible(true);
        txtNumeroOrden1.setEditable(false);

        txtReferencias.setLineWrap(true);
        txtNombre.setLineWrap(true);
        txtCalleUno.setLineWrap(true);
        txtObservaciones.setLineWrap(true);

        //FORMULARIO INABILITADO
        txtNombre.setEditable(false);
        txtCalleDos1.setEditable(false);
        txtCalleUno.setEditable(false);
        txtCalleTres.setEditable(false);
        txtTelefono.setEditable(false);
        txtReferencias.setEditable(false);

        txtIdentificadorProduct.setEditable(false);
        txtNombreProducto.setEditable(false);
        txtStock.setEditable(false);
        txtPrecio.setEditable(false);
        txtTotalVenta.setEditable(false);
        txtLocalidad.setEditable(false);

        cargarLocalidad();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblCalle = new javax.swing.JLabel();
        lblReferencia = new javax.swing.JLabel();
        lblLocalidad = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCalleTres = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        lblCallePricipal = new javax.swing.JLabel();
        lblentreCalle = new javax.swing.JLabel();
        txtCalleDos1 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cmbEntrega = new javax.swing.JComboBox<>();
        txtId_Clientes = new javax.swing.JTextField();
        btnBuscarCliente = new javax.swing.JButton();
        btnActualizarCliente = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtReferencias = new javax.swing.JTextArea();
        cmbTipoOrden = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        lblReferencia1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        txtLocalidad = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCalleUno = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtNombre = new javax.swing.JTextArea();
        txtTotalVenta = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnGenerarVenta = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNumeroOrden1 = new javax.swing.JTextField();
        txtUsuarioNombre = new javax.swing.JTextField();
        txtClock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtIdentificadorProduct = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnAgregrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnBuscarStock = new javax.swing.JButton();
        cmbCantidadPollo = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrdenesLLamada = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("REGISTRO DE ORDENES VENTANA 1");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("FORMULARIO DEL CLIENTE"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNombre.setText("NOMBRE DEL CLIENTE:");
        jPanel2.add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        lblCalle.setText("Y CALLE:");
        jPanel2.add(lblCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, -1, -1));

        lblReferencia.setText("OBSERVACIONES:");
        jPanel2.add(lblReferencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, -1));

        lblLocalidad.setText("LOCALIDAD:");
        jPanel2.add(lblLocalidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, -1, -1));

        jLabel9.setText("TIPO DE ORDEN:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 360, -1, -1));

        txtCalleTres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCalleTresKeyTyped(evt);
            }
        });
        jPanel2.add(txtCalleTres, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 200, -1));

        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });
        jPanel2.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 200, 20));

        lblCallePricipal.setText("CALLE PRINCIPAL:");
        jPanel2.add(lblCallePricipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, -1, -1));

        lblentreCalle.setText("ENTRE CALLE:");
        jPanel2.add(lblentreCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, -1, -1));

        txtCalleDos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCalleDos1KeyTyped(evt);
            }
        });
        jPanel2.add(txtCalleDos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 200, -1));

        jLabel19.setText("TIPO DE ENTREGA:");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        cmbEntrega.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LLEVAR A DOMICILIO", "RECOGER EN TIENDA" }));
        cmbEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEntregaActionPerformed(evt);
            }
        });
        jPanel2.add(cmbEntrega, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, 200, -1));
        jPanel2.add(txtId_Clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 20, -1));

        btnBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar2.png"))); // NOI18N
        btnBuscarCliente.setText("BUSCAR CLIENTE");
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 210, 40));

        btnActualizarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/flechas.jpg"))); // NOI18N
        btnActualizarCliente.setText("ACTUALIZAR CLIENTE");
        btnActualizarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarClienteActionPerformed(evt);
            }
        });
        jPanel2.add(btnActualizarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 210, 40));

        txtReferencias.setColumns(20);
        txtReferencias.setRows(5);
        jScrollPane2.setViewportView(txtReferencias);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, 200, 70));

        cmbTipoOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ORDEN POR LLAMADA", "ORDEN PRESENCIAL" }));
        jPanel2.add(cmbTipoOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 350, 200, -1));

        jLabel10.setText("NÚEMRO DE TELEFONO:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, -1, -1));

        lblReferencia1.setText("REFERENCIA DEL HOGAR:");
        jPanel2.add(lblReferencia1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        txtObservaciones.setColumns(20);
        txtObservaciones.setRows(5);
        jScrollPane3.setViewportView(txtObservaciones);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 200, 60));
        jPanel2.add(txtLocalidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 220, 200, -1));

        txtCalleUno.setColumns(20);
        txtCalleUno.setRows(5);
        jScrollPane4.setViewportView(txtCalleUno);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 200, 70));

        txtNombre.setColumns(20);
        txtNombre.setRows(5);
        jScrollPane5.setViewportView(txtNombre);

        jPanel2.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 210, 70));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 930, 460));
        getContentPane().add(txtTotalVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1450, 460, 150, -1));

        jLabel14.setText("TOTAL A PAGAR: $$");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 460, 110, 20));

        btnGenerarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ventas22.jpg"))); // NOI18N
        btnGenerarVenta.setText("GENERAR VENTA");
        btnGenerarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 440, 190, 50));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ORDENES GENERALES "));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setText("NÚMERO ORDEN:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });
        jPanel1.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 130, -1));

        jLabel20.setText("FECHA:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/gavilanes1.jpeg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 120, 70));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/carrito.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, -1, -1));

        jLabel3.setText("USUARIO:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 90, -1));

        txtNumeroOrden1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroOrden1ActionPerformed(evt);
            }
        });
        jPanel1.add(txtNumeroOrden1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 130, -1));
        jPanel1.add(txtUsuarioNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 180, -1));
        jPanel1.add(txtClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 130, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("LA HORA ES:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 100));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("CONSULTA DE PRODUCTO"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("IDENTIFICADOR:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, -1, -1));
        jPanel3.add(txtIdentificadorProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 220, -1));

        jLabel12.setText("NOMBRE: ");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, -1, -1));

        jLabel13.setText("STOCK: ");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 60, -1));

        jLabel15.setText("PRECIO: ");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, -1, -1));
        jPanel3.add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 120, 220, -1));

        txtStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockActionPerformed(evt);
            }
        });
        jPanel3.add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 220, -1));

        jLabel16.setText("CANTIDAD: ");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, -1, 10));

        txtPrecio.setText("$");
        jPanel3.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, 220, -1));

        btnAgregrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/addOrder1.png"))); // NOI18N
        btnAgregrar.setText("AGREGAR ORDEN");
        btnAgregrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregrarActionPerformed(evt);
            }
        });
        jPanel3.add(btnAgregrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 200, 50));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btnCancelar2.png"))); // NOI18N
        btnCancelar.setText("CANCELAR ");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 280, 200, 50));

        btnBuscarStock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/IMG1.jpg"))); // NOI18N
        btnBuscarStock.setText("BUSCAR PRODUCTO A VENDER");
        btnBuscarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarStockActionPerformed(evt);
            }
        });
        jPanel3.add(btnBuscarStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 270, 50));

        cmbCantidadPollo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.00", "0.50", "1.00", "1.50", "2.00", "2.50", "3.00", "3.50", "4.00", "4.50", "5.00", "5.50", "6.00", "6.50", "7.00", "7.50", "8.00", "8.50", "9.00", "9.50", "10.00", "10.50", "11.00", "11.50", "12.00", "12.50", "13.00", "13.50", "14.00", "14.50", "15.00", "15.50", "16.00", "16.50", "17.00", "17.50", "18.00", "18.50", "19.00", "19.50", "20.00", "21.00", "22.00", "23.00", "24.00", "25.00", "26.00", "27.00", "28.00", "29.00", "30.00", "31.00", "32.00", "33.00", "34.00", "35.00", "36.00", "37.00", "38.00", "39.00", "40.00", "50.00", "51.00", "52.00", "53.00", "54.00", "55.00", "56.00", "57.00", "58.00", "59.00", "60.00", "61.00", "62.00", "63.00", "64.00", "65.00", "66.00", "67.00", "68.00", "69.00", "70.00", "71.00", "72.00", "73.00", "74.00", "75.00", "76.00", "77.00", "78.00", "79.00", "80.00", "81.00", "82.00", "83.00", "84.00", "85.00", "86.00", "87.00", "88.00", "89.00", "90.00", "91.00", "92.00", "93.00", "94.00", "95.00", "96.00", "97.00", "98.00", "99.00", "100.00" }));
        cmbCantidadPollo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCantidadPolloItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbCantidadPollo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, 220, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton2.setText("ELIMINAR ORDENES REALIZADAS DEL DÍA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 280, -1, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 0, 750, 340));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("TABLA DE VENTAS GENERALES"));

        tableOrdenesLLamada = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tableOrdenesLLamada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NUMERO ORDEN", "CLIENTE", "LOCALIDAD", "HOGAR", "R.HOGAR", "T.ENTREGA", "TEL", "ID PRODUCTO", "NOMBRE PRODUCTO", "STOCK", "PRECIO ", "CANTIDAD", "TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrdenesLLamada.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableOrdenesLLamada);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1738, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 1770, 190));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/deleteROW1.png"))); // NOI18N
        jButton1.setText("ELIMINAR FILA ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 440, 160, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiarCamposProducto();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregrarActionPerformed

        if (validarCamposVacios() == true || validarCamposVacios2() == true) {
            JOptionPane.showMessageDialog(null, "Posiblemente Los Campos Del Producto Estan Vacios o Los Campos De "
                    + " Los Clientes Estan Vacios, Por Favor Verifique");
        } else {
            llenarTabla();
        }


    }//GEN-LAST:event_btnAgregrarActionPerformed

    private void txtStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockActionPerformed
    }//GEN-LAST:event_txtStockActionPerformed

    private void btnGenerarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarVentaActionPerformed

        if (validarCamposVacios2() == true) {
            JOptionPane.showMessageDialog(null, "Los Campos Estan Vacios, Por Favor Busque A Un Cliente");
        } else {
            valor = (String) cmbEntrega.getSelectedItem();
//

            /*if (valor.equalsIgnoreCase("Selecciona")) {

                JOptionPane.showMessageDialog(null, "No Se Ha Selecionado Nada En Tipo De Entrega y En Tipo De Orden");

            }*/
            if (valor.equalsIgnoreCase("recoger en tienda")) {

                if (this.tableOrdenesLLamada.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "No Has Agregado La Orden");
                } else {

                    try {
                        registarVenta1();
                    } catch (IOException ex) {
                        Logger.getLogger(VistaOrdenesPorLLamadasVentana1.class.getName()).log(Level.SEVERE, null, ex);

                    }

                }

            }

            if (valor.equalsIgnoreCase("llevar a domicilio")) {

                if (this.tableOrdenesLLamada.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "No Has Agregado La Orden");

                } else {

                    try {
                        registarVenta();
                    } catch (IOException ex) {
                        Logger.getLogger(VistaOrdenesPorLLamadasVentana1.class.getName()).log(Level.SEVERE, null, ex);

                    }

                }

            }
        }


    }//GEN-LAST:event_btnGenerarVentaActionPerformed

    private void cmbEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEntregaActionPerformed


    }//GEN-LAST:event_cmbEntregaActionPerformed

    private void txtCalleDos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCalleDos1KeyTyped

        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo letras por favor!!");
            txtCalleDos1.setCursor(null);

        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo letras por favor!!");
            txtCalleDos1.setCursor(null);

        }
    }//GEN-LAST:event_txtCalleDos1KeyTyped

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped

        char c = evt.getKeyChar();

        if (Character.isLetter(c)) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo numeros por favor!!");
            txtTelefono.setCursor(null);

        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255
                || txtTelefono.getText().length() > 10) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo debe de ingresar 10 numeros ");
            txtTelefono.setCursor(null);

        }

    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtCalleTresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCalleTresKeyTyped

        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo letras por favor!!");
            txtCalleTres.setCursor(null);

        } else if ((int) evt.getKeyChar() > 32 && (int) evt.getKeyChar() <= 47
                || (int) evt.getKeyChar() >= 58 && (int) evt.getKeyChar() <= 64
                || (int) evt.getKeyChar() >= 91 && (int) evt.getKeyChar() <= 96
                || (int) evt.getKeyChar() >= 123 && (int) evt.getKeyChar() <= 255) {

            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo letras por favor!!");
            txtCalleTres.setCursor(null);

        }
    }//GEN-LAST:event_txtCalleTresKeyTyped

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed

        abrirListaClientes();

    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void btnActualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarClienteActionPerformed

        openActualizarCliente();

    }//GEN-LAST:event_btnActualizarClienteActionPerformed

    private void btnBuscarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarStockActionPerformed
        abrirListaStock2();
    }//GEN-LAST:event_btnBuscarStockActionPerformed

    private void cmbCantidadPolloItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCantidadPolloItemStateChanged

//        valorCantidad = (String) cmbCantidadPollo.getSelectedItem();
//        if(valorCantidad.equalsIgnoreCase("Seleccione la cantidad")){
//            
//            JOptionPane.showMessageDialog(null, "Ey no has seleccionado nada");
//        }else{
        if (validarCamposVacios() != false) {
            JOptionPane.showMessageDialog(null, "Los Demas Campos Estan Vacios, Por Favor Llenelos", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            cantidadSpinner = (float) Float.parseFloat((String) cmbCantidadPollo.getSelectedItem());
            cantidadTxt = Float.parseFloat(txtStock.getText());
            if (cantidadSpinner > cantidadTxt) {
                JOptionPane.showMessageDialog(null, "Lo sentimos la cantidad que seleccionaste es mayor que el Stock!!");
                cmbCantidadPollo.setSelectedItem("0.00");
            }
        }

//        }

    }//GEN-LAST:event_cmbCantidadPolloItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (tableOrdenesLLamada.getSelectedRow() >= 0) {
            eliminarFila();

        } else {
            JOptionPane.showMessageDialog(null, "No Ha Seleccionado Una Fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(null, "Las Ordenes Se Eliminarán De La Base De Datos, Desea Continuar?");

        int r = JOptionPane.showConfirmDialog(null, "¿Estás Seguro De Eliminar Todos los Registros?",
                "Eliminar", JOptionPane.YES_NO_OPTION);

        if (r == 0) {

            eliminarOrdenes();

        }else{
            JOptionPane.showMessageDialog(null, "Correcto!!!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtNumeroOrden1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroOrden1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroOrden1ActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnActualizarCliente;
    public javax.swing.JButton btnAgregrar;
    public javax.swing.JButton btnBuscarCliente;
    public javax.swing.JButton btnBuscarStock;
    public javax.swing.JButton btnCancelar;
    public javax.swing.JButton btnGenerarVenta;
    private javax.swing.JComboBox<String> cmbCantidadPollo;
    public javax.swing.JComboBox<String> cmbEntrega;
    private javax.swing.JComboBox<String> cmbTipoOrden;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel15;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JLabel lblCalle;
    public javax.swing.JLabel lblCallePricipal;
    public javax.swing.JLabel lblLocalidad;
    public javax.swing.JLabel lblNombre;
    public javax.swing.JLabel lblReferencia;
    public javax.swing.JLabel lblReferencia1;
    public javax.swing.JLabel lblentreCalle;
    public javax.swing.JTable tableOrdenesLLamada;
    public static javax.swing.JTextField txtCalleDos1;
    public static javax.swing.JTextField txtCalleTres;
    public static javax.swing.JTextArea txtCalleUno;
    private javax.swing.JTextField txtClock;
    public javax.swing.JTextField txtFecha;
    public static javax.swing.JTextField txtId_Clientes;
    public static javax.swing.JTextField txtIdentificadorProduct;
    public static javax.swing.JTextField txtLocalidad;
    public static javax.swing.JTextArea txtNombre;
    public static javax.swing.JTextField txtNombreProducto;
    public static javax.swing.JTextField txtNumeroOrden1;
    private javax.swing.JTextArea txtObservaciones;
    public static javax.swing.JTextField txtPrecio;
    public static javax.swing.JTextArea txtReferencias;
    public static javax.swing.JTextField txtStock;
    public static javax.swing.JTextField txtTelefono;
    public javax.swing.JTextField txtTotalVenta;
    private static javax.swing.JTextField txtUsuarioNombre;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {

        if (txtIdentificadorProduct.getText().isEmpty()
                || txtNombreProducto.getText().isEmpty()
                || txtStock.getText().isEmpty()
                || txtPrecio.getText().isEmpty()
                || cmbCantidadPollo.getSelectedItem().equals("Seleccione")) {

            JOptionPane.showMessageDialog(null, "Uppss!!....Los Campos De Producto Estan Vacios");

        } else {

            direccion = txtCalleUno.getText() + ", " + txtCalleDos1.getText() + " y " + txtCalleTres.getText();

            DefaultTableModel modelo = (DefaultTableModel) tableOrdenesLLamada.getModel();
            int fila = tableOrdenesLLamada.getRowCount();

            modelo.addRow(new Object[13]);
            modelo.setValueAt(txtNumeroOrden1.getText(), fila, 0);
            modelo.setValueAt(txtNombre.getText(), fila, 1);
            modelo.setValueAt(txtLocalidad.getText(), fila, 2);
            modelo.setValueAt(direccion, fila, 3);
            modelo.setValueAt(txtReferencias.getText(), fila, 4);
            modelo.setValueAt(cmbEntrega.getSelectedItem(), fila, 5);
            modelo.setValueAt(txtTelefono.getText(), fila, 6);
            modelo.setValueAt(txtIdentificadorProduct.getText(), fila, 7);
            modelo.setValueAt(txtNombreProducto.getText(), fila, 8);
            modelo.setValueAt(txtStock.getText(), fila, 9);
            modelo.setValueAt(txtPrecio.getText(), fila, 10);
            modelo.setValueAt(cmbCantidadPollo.getSelectedItem(), fila, 11);
            modelo.setValueAt(totalTable(), fila, 12);
            totalVenta();
            limpiarCamposProducto();
        }
    }

    public Object totalTable() {
        float total = 0;
        total = Float.parseFloat(txtPrecio.getText()) * Float.parseFloat(String.valueOf(cmbCantidadPollo.getSelectedItem()));
        return total;

    }

    private void totalVenta() {
        double suma;
        double tt = 0;
        int total = tableOrdenesLLamada.getRowCount();
        total -= 1;

        for (int x = 0; x <= total; x++) {
            suma = Double.parseDouble(String.valueOf(tableOrdenesLLamada.getValueAt(x, 12)));
            tt = tt + suma;

        }

        double t = tt;
        txtTotalVenta.setText(String.valueOf(t));

    }

    //ESTE METODO TIENE EL TICKET PERO CON LA DIRECCION
    private void registarVenta() throws IOException {
        ConexionBD objCBD = new ConexionBD();
        direccion = txtCalleUno.getText() + "," + txtCalleDos1.getText() + "," + txtCalleTres.getText();

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_insertarOrdenCall(?,?,?,?,?,?,?,?,?)}");
        instruccionBD.add(txtNumeroOrden1.getText());
        instruccionBD.add(txtNombre.getText());
        instruccionBD.add(txtLocalidad.getText());
        instruccionBD.add(direccion);
        instruccionBD.add(txtReferencias.getText());
        instruccionBD.add(cmbEntrega.getSelectedItem());
        instruccionBD.add(txtTelefono.getText());
        instruccionBD.add(txtFecha.getText());
        instruccionBD.add(txtTotalVenta.getText());
        objCBD.ejecutarABC(instruccionBD);

        int r = JOptionPane.showConfirmDialog(null, "¿Desea Proceder a Imprimir Ticket?",
                "Mensaje de Imprensión", JOptionPane.YES_NO_OPTION);

        if (r == 0) {
            detalleOrden();
            generarTicketNew2();
            generarSerie();
            actualizarCantidadStock();
            vaciaTabla();
            limpiarCamposCompleto();
            objCBD.cerrarConexion();
        } else {
           
             JOptionPane.showMessageDialog(null, "Entendido, :D ");
        }

    }

//ESTE METODO TIENE EL DEL TICKET SIN DIRECCION
    private void registarVenta1() throws IOException {
        ConexionBD objCBD = new ConexionBD();
        direccion = txtCalleUno.getText() + "," + txtCalleDos1.getText() + "," + txtCalleTres.getText();

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_insertarOrdenCall(?,?,?,?,?,?,?,?,?)}");
        instruccionBD.add(txtNumeroOrden1.getText());
        instruccionBD.add(txtNombre.getText());
        instruccionBD.add(txtLocalidad.getText());
        instruccionBD.add(direccion);
        instruccionBD.add(txtReferencias.getText());
        instruccionBD.add(cmbEntrega.getSelectedItem());
        instruccionBD.add(txtTelefono.getText());
        instruccionBD.add(txtFecha.getText());
        instruccionBD.add(txtTotalVenta.getText());
        objCBD.ejecutarABC(instruccionBD);
        int r = JOptionPane.showConfirmDialog(null, "¿Desea Proceder a Imprimir Ticket?",
                "Mensaje de Imprensión", JOptionPane.YES_NO_OPTION);

        if (r == 0) {
            detalleOrden();

        generarTicketNew3();

        generarSerie();
        actualizarCantidadStock();
        vaciaTabla();
        limpiarCamposCompleto();
        objCBD.cerrarConexion();
        } else {
           
             JOptionPane.showMessageDialog(null, "Entendido, :D ");
        }
        
        
        
        
        

    }

    private void limpiarCamposCompleto() {

        txtNombre.setText(null);
        txtLocalidad.setText(null);
        txtCalleUno.setText(null);
        txtCalleDos1.setText(null);
        txtCalleTres.setText(null);
        txtReferencias.setText(null);
        cmbEntrega.setSelectedItem("Selecciona");
        cmbTipoOrden.setSelectedItem("Seleccione");
        txtTelefono.setText(null);
        txtTotalVenta.setText(null);
        txtObservaciones.setText(null);

    }

    private void limpiarCamposProducto() {

        txtIdentificadorProduct.setText(null);
        txtNombreProducto.setText(null);
        txtStock.setText(null);
        txtPrecio.setText(null);
        //cmbCantidadPollo.setSelectedItem("");

    }

    public String NoSerie() {
        ConexionBD objCBD = new ConexionBD();
        String serie = "";

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call  sp_consultarOrdenCall()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);

        try {
            while (cdr.next()) {

                serie = cdr.getString(1);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }

        return serie;

    }

    public void generarSerie() {

        String serie = NoSerie();

        if (serie == null) {
            txtNumeroOrden1.setText("0000001");

        } else {
            int increment = Integer.parseInt(serie);
            increment = increment + 1;
            txtNumeroOrden1.setText("000000" + increment);
        }

    }

    public void vaciaTabla() {
        DefaultTableModel tb = (DefaultTableModel) tableOrdenesLLamada.getModel();
        int a = tableOrdenesLLamada.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

    }

    public String IdOrdenes() {
        ConexionBD objCBD = new ConexionBD();
        String IdO = "";

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call  sp_consultarIdOrdenLLamada()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);

        try {
            while (cdr.next()) {

                IdO = cdr.getString(1);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }

        return IdO;

    }

    int idP;
    String nombreP;
    String nombreR;
    String nombreC;
    String locali;
    double total;
    int idV;
    String telC;
    float canti;

    private void detalleOrden() {
        ConexionBD objCBD = new ConexionBD();
        String idVenta = IdOrdenes();

        idV = Integer.parseInt(idVenta);
        for (int i = 0; i < tableOrdenesLLamada.getRowCount(); i++) {
            nombreC = String.valueOf(tableOrdenesLLamada.getValueAt(i, 1).toString());
            locali = String.valueOf(tableOrdenesLLamada.getValueAt(i, 3).toString());
            telC = String.valueOf(tableOrdenesLLamada.getValueAt(i, 6).toString());
            idP = Integer.parseInt(tableOrdenesLLamada.getValueAt(i, 7).toString());//8
            nombreP = String.valueOf(tableOrdenesLLamada.getValueAt(i, 8));//9
            canti = Float.parseFloat(tableOrdenesLLamada.getValueAt(i, 11).toString());//11
            total = Double.parseDouble(tableOrdenesLLamada.getValueAt(i, 12).toString());//13

            objCBD.realizarConexion();
            ArrayList instruccionBD = new ArrayList();
            instruccionBD.add("{call sp_insertarDetalleOrdenLLamada(?,?,?,?,?,?,?,?,?)}");
            instruccionBD.add(idV);
            instruccionBD.add(nombreC);
            instruccionBD.add(locali);
            instruccionBD.add(telC);
            instruccionBD.add(idP);
            instruccionBD.add(nombreP);
            instruccionBD.add(canti);
            instruccionBD.add(total);
            instruccionBD.add(txtFecha.getText());
            objCBD.ejecutarABC(instruccionBD);
            objCBD.cerrarConexion();
        }

    }

    private void actualizarCantidadStock() {
        ConexionBD objCBD = new ConexionBD();
        int filas = tableOrdenesLLamada.getRowCount();

        for (int i = 0; i < filas; i++) {
            idp = Integer.parseInt(tableOrdenesLLamada.getValueAt(i, 7).toString());
            cantidadStock = Float.parseFloat(tableOrdenesLLamada.getValueAt(i, 9).toString());
            cant = Float.parseFloat(tableOrdenesLLamada.getValueAt(i, 11).toString());
            resta = cantidadStock - cant;

            System.out.println("EL resultado es: " + resta);

            ArrayList instruccionBD = new ArrayList();
            instruccionBD.add(0, "{call sp_ActualizarStock2(?,?)}");
            instruccionBD.add(idp);
            instruccionBD.add(resta);
            objCBD.ejecutarABC(instruccionBD);
            objCBD.cerrarConexion();

        }
    }

    private void abrirListaClientes() {

        ListaClientesLlamada1 clientes = new ListaClientesLlamada1();
        clientes.setVisible(true);

    }

    private void openActualizarCliente() {

        ActualizarCliente cliente = new ActualizarCliente();
        cliente.setVisible(true);

    }

    private void abrirListaStock2() {
        ListaStock3 stock2 = new ListaStock3();
        stock2.setVisible(true);
    }

    private void eliminarFila() {

        DefaultTableModel dtm = (DefaultTableModel) tableOrdenesLLamada.getModel();

        int fila = tableOrdenesLLamada.getSelectedRow();

        String valor = tableOrdenesLLamada.getValueAt(fila, 1).toString();

        int r = JOptionPane.showConfirmDialog(null, "¿Estás seguro de Eliminar Este Producto?",
                "Eliminar", JOptionPane.YES_NO_OPTION);

        if (r == 0) {

            JOptionPane.showMessageDialog(null, "Producto Eliminado");
            dtm.removeRow(tableOrdenesLLamada.getSelectedRow());
            totalVenta();

        }

    }

    //AQUI SE HACE LA CONSULTA DEL CLIENTE PARA POSTERIEMNETE IMPRIMIR EL TICKET

    /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
    public void generarTicketNew2() throws IOException {

        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y "
                + txtCalleTres.getText();

        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);
        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((17 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE VENTA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 2, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 3, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());//OBTENER EL USUARIO DE LA BD PARA IMPRIMIR EN EL TICKET
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "LOCALIDAD: " + txtLocalidad.getText());
        printer.printTextWrap(8, 8, 1, 80, "DIRECCION: " + direccionOfHome);
        printer.printTextWrap(9, 9, 1, 600, "REFERENCIA: " + txtReferencias.getText());
        printer.printTextWrap(10, 10, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(11, 11, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(12, 12, 1, 80, "TIPO ORDEN: " + cmbTipoOrden.getSelectedItem());
        printer.printTextWrap(13, 1, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(14, 2, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(15, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(16, 2, 1, 50, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            /*String pro34 = printer.alinharADireita(1, );
            String pro = printer.alinharADireita(2, );
            String precio = printer.alinharADireita(3, );
            String pre = printer.alinharADireita(4, );
             */
            printer.printTextWrap(17 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(17 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(17 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(17 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());

        }

        printer.printTextWrap((17 + filas) + 1, 1, 1, 80, "TOTAL A COBRAR:.........................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((17 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 

        //printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\tickets\\TICKETS DE VENTA\\" + txtUsuarioNombre.getText() + ".txt");
        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();
        generarTicketCopia();
//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
    }

    //AQUI SE IMPRIME DE NUEVO EL TICKET YA QUE SON 2 VECES 
    /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
 /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
    public void generarTicketCopia() throws IOException {

        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y "
                + txtCalleTres.getText();

        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);
        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((17 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE VENTA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 2, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 3, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "LOCALIDAD: " + txtLocalidad.getText());
        printer.printTextWrap(8, 8, 1, 80, "DIRECCION: " + direccionOfHome);
        printer.printTextWrap(9, 9, 1, 600, "REFERENCIA: " + txtReferencias.getText());
        printer.printTextWrap(10, 10, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(11, 11, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(12, 12, 1, 80, "TIPO ORDEN: " + cmbTipoOrden.getSelectedItem());
        printer.printTextWrap(13, 1, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(14, 2, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(15, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(16, 2, 1, 50, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(17 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(17 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(17 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(17 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());
        }

        printer.printTextWrap((17 + filas) + 1, 1, 1, 80, "TOTAL A COBRAR:.........................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((17 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();
        generarTicketClienteNew2();
//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
    }

    //AQUI SE IMPRIME DE NUEVO EL TICKET YA QUE SON 2 VECES 
    /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
 /*AQUI VA EL METODO QUE ME ENCONTRE QUE SEGUN YA COMO TAL HACE EL TICKET*/
    ///ESTE ES EL TIKEC PARA EL CLIENTE 
    public void generarTicketClienteNew2() throws IOException {

//        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y \n"
//                + txtCalleTres.getText();
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);

        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((19 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE COMPRA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 3, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 4, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(8, 8, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(9, 9, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(10, 1, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(11, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(12, 2, 1, 50, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(13 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(13 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(13 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(13 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());
        }
        printer.printTextWrap((13 + filas) + 1, 1, 1, 80, "TOTAL A PAGAR:......................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((13 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap((13 + filas) + 3, 1, 10, 80, "!Gracias por su preferencia!");
        printer.printTextWrap((13 + filas) + 4, 1, 18, 80, "!LOS GAVILANES!");
        printer.printTextWrap((13 + filas) + 5, 1, 10, 80, "!GRACIAS POR LA PROPINA :D !");
        printer.printTextWrap((13 + filas) + 6, 1, 8, 80, "**No somos los mejores del mundo,");
        printer.printTextWrap((13 + filas) + 7, 1, 15, 80, "pero si del rumbo**");
        printer.printTextWrap((13 + filas) + 8, 1, 1, 111, "Pedidos al: 5549115290 o 5549117979");
        printer.printTextWrap((13 + filas) + 9, 2, 1, 80, "==============================================");

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();

    }


    /*AQUI VA EL METODO QUE SOLO IMPRIME EL TICKET SIN DIRECCION*/
    public void generarTicketNew3() throws IOException {

//        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y \n"
//                + txtCalleTres.getText();
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);

        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((14 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE VENTA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 3, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 4, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(8, 8, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(9, 9, 1, 80, "TIPO ORDEN: " + cmbTipoOrden.getSelectedItem());
        printer.printTextWrap(10, 1, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(11, 2, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(12, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(13, 2, 1, 50, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(14 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(14 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(14 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(14 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());
        }

        /*printer.printTextWrap(10 + i, 2, 1, 80, jTableAsignarRepartidor.getValueAt(i, 0).toString()
                    + "      " + jTableAsignarRepartidor.getValueAt(i, 2).toString()
                    +"\t   "+jTableAsignarRepartidor.getValueAt(i, 3).toString()
                    +"\t       $"+jTableAsignarRepartidor.getValueAt(i, 4).toString());*/
        printer.printTextWrap((14 + filas) + 1, 1, 1, 80, "TOTAL A COBRAR:......................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((14 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();
        generarTicketCoipa2();
    }

    ///SE GENERA LA COPIA DEL TICKET
    /*AQUI VA EL METODO QUE SOLO IMPRIME EL TICKET SIN DIRECCION*/
    public void generarTicketCoipa2() throws IOException {

//        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y \n"
//                + txtCalleTres.getText();
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);

        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((14 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE VENTA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 3, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 4, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(8, 8, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(9, 9, 1, 80, "TIPO ORDEN: " + cmbTipoOrden.getSelectedItem());
        printer.printTextWrap(10, 1, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(11, 2, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(12, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(13, 2, 1, 50, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(13 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(13 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(13 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(13 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());
        }
        printer.printTextWrap((14 + filas) + 1, 1, 1, 80, "TOTAL A COBRAR:......................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((14 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();
        generarTicketClienteNew1();

    }

    ///ESTE ES EL TIKEC PARA EL CLIENTE 
    public void generarTicketClienteNew1() throws IOException {

//        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y \n"
//                + txtCalleTres.getText();
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(80.00);

        int filas = tableOrdenesLLamada.getRowCount();
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((19 + filas) + 7, 40);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 15, 80, "***TICKET DE COMPRA***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

        printer.printTextWrap(3, 3, 1, 22, "N.ORDEN:" + txtNumeroOrden1.getText());
        printer.printTextWrap(3, 2, 28, 48, "N.CLIENTE:" + txtId_Clientes.getText());
        printer.printTextWrap(4, 4, 1, 60, "FECHA DEL DIA: " + txtFecha.getText());
        printer.printTextWrap(4, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(5, 5, 1, 80, "VENDEDOR: " + vista.txtUsuario.getText());
        printer.printTextWrap(6, 6, 1, 80, "CLIENTE: " + txtNombre.getText());
        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
        printer.printTextWrap(8, 8, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
        printer.printTextWrap(9, 9, 1, 600, "OBSERVACIONES: " + txtObservaciones.getText());
        printer.printTextWrap(10, 1, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(11, 2, 6, 80, "------Productos Adquiridos------");
        printer.printTextWrap(12, 2, 1, 80, "CANTIDAD     NOMBRE         PRECIO     TOTAL");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(13 + i, 2, 1, 80, tableOrdenesLLamada.getValueAt(i, 11).toString());
            printer.printTextWrap(13 + i, 2, 9, 80, tableOrdenesLLamada.getValueAt(i, 8).toString());
            printer.printTextWrap(13 + i, 2, 30, 80, "$" + tableOrdenesLLamada.getValueAt(i, 10).toString());
            printer.printTextWrap(13 + i, 2, 39, 80, "$" + tableOrdenesLLamada.getValueAt(i, 12).toString());
        }
        printer.printTextWrap((13 + filas) + 1, 1, 1, 80, "TOTAL A PAGAR:......................$" + txtTotalVenta.getText());//esta bien 

        printer.printTextWrap((13 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap((13 + filas) + 3, 1, 10, 80, "!Gracias por su preferencia!");
        printer.printTextWrap((13 + filas) + 4, 1, 18, 80, "!LOS GAVILANES!");
        printer.printTextWrap((13 + filas) + 5, 1, 10, 80, "!GRACIAS POR LA PROPINA :D !");
        printer.printTextWrap((13 + filas) + 6, 1, 8, 80, "**No somos los mejores del mundo,");
        printer.printTextWrap((13 + filas) + 7, 1, 15, 80, "pero si del rumbo**");
        printer.printTextWrap((13 + filas) + 8, 1, 1, 111, "Pedidos al: 5549115290 o 5549117979");
        printer.printTextWrap((13 + filas) + 9, 2, 1, 80, "==============================================");

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\65456465465\\Proyecto MServidor\\DesarrolloDeSoftwareMServidor\\tickets\\TICKETS DE VENTA\\" + txtNumeroOrden1.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

//debajo de la impresión del ticket creo esta otra impresion con los codigos de corte
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();

    }

    private void cargarLocalidad() {
        ConexionBD objCBD = new ConexionBD();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_LlenarCBOrdenLocalidades()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.getCdr();
        try {
            while (cdr.next()) {
                localidades = cdr.getString(1);

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "La consulta no se ha podido ejecutar. Razón SQL: " + ex, "EXCEPCIÓN SQL", JOptionPane.ERROR_MESSAGE);
        } finally {

            objCBD.cerrarConexion();
        }

    }

    private boolean validarCamposVacios() {

        m = txtIdentificadorProduct.getText().isEmpty()
                || txtNombreProducto.getText().isEmpty()
                || txtStock.getText().isEmpty()
                || txtPrecio.getText().isEmpty()
                || cmbCantidadPollo.getSelectedItem().equals("0.00");

        return m;

    }

    boolean x;

    private boolean validarCamposVacios2() {

        x = txtNombre.getText().isEmpty()
                || txtCalleDos1.getText().isEmpty()
                || txtCalleUno.getText().isEmpty()
                || txtCalleTres.getText().isEmpty()
                || txtLocalidad.getText().isEmpty()
                || txtTelefono.getText().isEmpty()
                || txtReferencias.getText().isEmpty();

        return x;

    }

    private void eliminarOrdenes() {
        ConexionBD objCBD = new ConexionBD();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_eliminarTodasLasOrdenes()}");

        objCBD.ejecutarABC(instruccionBD);
        JOptionPane.showMessageDialog(null, "Ordenes Eliminadas Satisfactoriamente");
          generarSerie();
        objCBD.cerrarConexion();
    }

    @Override
    public void run() {
        Thread ct = Thread.currentThread();

        while (ct == h1) {
            calcula();
            txtClock.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {

            }

        }

    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        Date fechaHoraActual = new Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";

        if (ampm.equals("AM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);

        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }

}
