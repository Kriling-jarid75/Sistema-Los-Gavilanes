/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import br.com.adilson.util.Extenso;
import br.com.adilson.util.PrinterMatrix;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import conexion.*;
import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleDos1;
import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleTres;
import static vista.VistaOrdenesPorLLamadasVentana1.txtCalleUno;
import static vista.VistaOrdenesPorLLamadasVentana1.txtNombre;
import static vista.VistaOrdenesPorLLamadasVentana1.txtReferencias;
import static vista.VistaOrdenesPorLLamadasVentana1.txtTelefono;

/**
 *
 * @author Garci
 */
public class ConsultarRepartidoresLLamadas12 extends javax.swing.JInternalFrame implements Runnable {

    String numOrdenN;

    int año, mes, dia;
    String hora, minutos, segundos, ampm;
    Calendar calendario;
    Thread h1;

    /**
     * Creates new form AsiganarRepartidoresLLamadas
     */
    public ConsultarRepartidoresLLamadas12() {
        initComponents();
        ConexionBD objCBD = new ConexionBD();
        Calendar calendar = new GregorianCalendar();

        txtNombreRepartidor.setEditable(false);
        txtTotal.setEditable(false);
        txtAreaDescripcion.setLineWrap(true);

        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_LlenarCBOrden5()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.getCdr();

        try {
            while (cdr.next()) {

                this.cmbSeleccionarOrden.addItem(cdr.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "La consulta no se ha podido ejecutar. Razón SQL: " + ex, "EXCEPCIÓN SQL", JOptionPane.ERROR_MESSAGE);
        } finally {

            objCBD.cerrarConexion();
        }
        h1 = new Thread(this);
        h1.start();
        txtClock.setVisible(true);
        txtClock.setEditable(false);
        año = calendar.get(Calendar.YEAR);
        mes = calendar.get(Calendar.MONTH) + 1;
        dia = calendar.get(Calendar.DATE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAsignarRepartidor = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        cmbSeleccionarOrden = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtNombreRepartidor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnImprimirTicket = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaDescripcion = new javax.swing.JTextArea();
        txtClock = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("ASIGNAR REPARTIDORES");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("ASIGNAR REPARTOS"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("CONSULTAR REPARTIDOR");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        jTableAsignarRepartidor = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTableAsignarRepartidor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID ORDEN", "ID PRODUCTO", "NOMBRE PRODUCTO", "CANTIDAD", "PRECIO", "FECHA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAsignarRepartidor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableAsignarRepartidor);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 960, 230));
        jPanel2.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 380, 154, 20));

        cmbSeleccionarOrden.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeleccionarOrdenItemStateChanged(evt);
            }
        });
        cmbSeleccionarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSeleccionarOrdenActionPerformed(evt);
            }
        });
        jPanel2.add(cmbSeleccionarOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 250, -1));

        jLabel6.setText("SELECCIONAR REPARTIDOR:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 170, -1));
        jPanel2.add(txtNombreRepartidor, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 380, 320, -1));

        jLabel10.setText("TOTAL: $$");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 380, -1, -1));

        jLabel11.setText(" REPARTIDOR ASIGNADO:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, 150, 20));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton1.setText("CANCELAR ORDEN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 210, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar2.png"))); // NOI18N
        jButton2.setText("BUSCAR ORDEN POR REPARTIDOR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 70, 280, -1));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/images.png"))); // NOI18N
        jButton3.setText("LIMPIAR CAMPOS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, 210, -1));

        btnImprimirTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/seleccionarArchivo.jpg"))); // NOI18N
        btnImprimirTicket.setText("IMPRIMIR TOTAL DE VENTAS");
        btnImprimirTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirTicketActionPerformed(evt);
            }
        });
        jPanel2.add(btnImprimirTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 440, -1, -1));

        jLabel2.setText("OBSERVACIONES:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, 110, -1));

        txtAreaDescripcion.setColumns(20);
        txtAreaDescripcion.setRows(5);
        jScrollPane2.setViewportView(txtAreaDescripcion);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 430, -1, -1));

        txtClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClockActionPerformed(evt);
            }
        });
        jPanel2.add(txtClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 20, 130, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("LO HORA ES:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 20, 90, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1088, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSeleccionarOrdenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeleccionarOrdenItemStateChanged
        mandarDatos1();
        mandarDatos2();
    }//GEN-LAST:event_cmbSeleccionarOrdenItemStateChanged

    private void cmbSeleccionarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSeleccionarOrdenActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbSeleccionarOrdenActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (jTableAsignarRepartidor.getSelectedRow() >= 0) {
            eliminarElDetalle();

        } else {

            JOptionPane.showMessageDialog(null, "No Ha Seleccionado Una Fila", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }

        //cancelarOrden();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        buscarOrdenPorRepartidor();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnImprimirTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirTicketActionPerformed

        if (jTableAsignarRepartidor.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No Hay Nada Por Imprimir", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else {

            try {
                
        int r = JOptionPane.showConfirmDialog(null, "¿Desea Proceder a Imprimir Ticket?",
                "Mensaje de Imprensión", JOptionPane.YES_NO_OPTION);

        if (r == 0) { 
            generarTicketDeRepartidores();
        } else {
           
             JOptionPane.showMessageDialog(null, "Entendido, :D ");
        }   
            } catch (IOException ex) {
                Logger.getLogger(ConsultarRepartidoresLLamadas12.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnImprimirTicketActionPerformed

    private void txtClockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnImprimirTicket;
    private javax.swing.JComboBox<String> cmbSeleccionarOrden;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAsignarRepartidor;
    private javax.swing.JTextArea txtAreaDescripcion;
    private javax.swing.JTextField txtClock;
    public static javax.swing.JTextField txtNombreRepartidor;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void mandarDatos1() {
        ConexionBD objCBD = new ConexionBD();
        String nombreC = String.valueOf(cmbSeleccionarOrden.getSelectedItem().toString());

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_ARepaCllamada(?)}");
        instruccionBD.add(nombreC);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {

                txtNombreRepartidor.setText(cdr.getString(5));
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {

            objCBD.cerrarConexion();
        }
        total();

    }

    private void mandarDatos2() {
        ConexionBD objCBD = new ConexionBD();
        String nombreC2 = String.valueOf(cmbSeleccionarOrden.getSelectedItem().toString());
        DefaultTableModel modelo = new DefaultTableModel();
        //modelo.addColumn("IDENTIFICADOR");
        modelo.addColumn("ID ORDEN");
        modelo.addColumn("ID PRODUCTO");
        modelo.addColumn("NOMBRE PRODUCTO");
        modelo.addColumn("CANTIDAD");
        modelo.addColumn("PRECIO");
        //modelo.addColumn("REPARTIDOR");
        modelo.addColumn("FECHA");

        jTableAsignarRepartidor.setModel(modelo);
        String[] datos = new String[6];

        objCBD.realizarConexion();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_consultarOCLlamada(?)}");
        instruccionBD.add(nombreC2);
        ResultSet cdr = objCBD.ejecutarConsulta(instruccionBD);
        try {
            while (cdr.next()) {
                datos[0] = cdr.getString(1);
                datos[1] = cdr.getString(2);
                datos[2] = cdr.getString(3);
                datos[3] = cdr.getString(4);
                datos[4] = cdr.getString(5);
                datos[5] = cdr.getString(6);
                //datos[6] = cdr.getString(7);
                //datos[7] = cdr.getString(8);

                modelo.addRow(datos);
            }
            jTableAsignarRepartidor.setModel(modelo);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar la consulta" + ex, "ERROR", JOptionPane.ERROR_MESSAGE);

        } finally {

            objCBD.cerrarConexion();
        }
        total();
    }

    private void total() {
        double suma;
        double tt = 0;
        int total = jTableAsignarRepartidor.getRowCount();
        total -= 1;

        for (int x = 0; x <= total; x++) {
            suma = Double.parseDouble(String.valueOf(jTableAsignarRepartidor.getValueAt(x, 4)));
            tt = tt + suma;
        }
        double t = tt;
        txtTotal.setText(String.valueOf(t));

    }

    private void eliminarElDetalle() {
        ConexionBD objCBD = new ConexionBD();
        DefaultTableModel dtm = (DefaultTableModel) jTableAsignarRepartidor.getModel();
        int fila = jTableAsignarRepartidor.getSelectedRow();
        String valor3 = jTableAsignarRepartidor.getValueAt(fila, 0).toString();

        int valor = Integer.parseInt(valor3);

        int r = JOptionPane.showConfirmDialog(null, "¿Estás seguro de Eliminar Este Producto?",
                "Eliminar", JOptionPane.YES_NO_OPTION);
        if (r == 0) {
            ArrayList instruccionBD = new ArrayList();
            instruccionBD.add("{call sp_cancelarDetalleOrden(?)}");

            instruccionBD.add(valor);

            objCBD.ejecutarABC(instruccionBD);
            dtm.removeRow(jTableAsignarRepartidor.getSelectedRow());

            JOptionPane.showMessageDialog(null, "Orden Eliminada");

            limpiarCampos();
            objCBD.cerrarConexion();

        }

    }

    public void limpiarCampos() {

        txtNombreRepartidor.setText(null);
        txtTotal.setText(null);

        cmbSeleccionarOrden.setSelectedItem("Seleccionar");

        vaciarTabla();
        mandarDatos2();

    }

    public void vaciarTabla() {

        DefaultTableModel tb = (DefaultTableModel) jTableAsignarRepartidor.getModel();
        int a = jTableAsignarRepartidor.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }

    public void consulta1() {
        ConexionBD objCBD = new ConexionBD();
        ArrayList instruccionBD = new ArrayList();
        instruccionBD.add("{call sp_LlenarCBOrden5()}");

        objCBD.ejecutarConsulta(instruccionBD);
        ResultSet cdr = objCBD.getCdr();
        try {
            while (cdr.next()) {
                this.cmbSeleccionarOrden.addItem(cdr.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "La consulta no se ha podido ejecutar. Razón SQL: " + ex, "EXCEPCIÓN SQL", JOptionPane.ERROR_MESSAGE);
        } finally {

            objCBD.cerrarConexion();
        }

    }

    private void buscarOrdenPorRepartidor() {

        ListaDeRepartos clientes = new ListaDeRepartos();
        clientes.setVisible(true);

    }

    /*AQUI VA EL METODO QUE SOLO IMPRIME EL TICKET SIN DIRECCION*/
    public void generarTicketDeRepartidores() throws IOException {
        int filas = jTableAsignarRepartidor.getRowCount();
        // int filas = jTableAsignarRepartidor.getRowCount();
        // int columnas = jTableAsignarRepartidor.getColumnCount();
        //String matriz[][] = new String[filas][columnas];
//        String direccionOfHome = txtCalleUno.getText() + "," + txtCalleDos1.getText() + " y \n"
//                + txtCalleTres.getText();
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(100.00);

        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize((10 + filas) + 7, 30);
        //Imprimir * de la 2da linea a 25 en la columna 1;
        // printer.printCharAtLin(2, 25, 1, "*");
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printTextWrap(1, 2, 1, 80, "===============================================");//esta bien 
        //Imprimir Encabezado nombre del La EMpresa
        printer.printTextWrap(2, 2, 12, 80, "***TICKET DE MIS VENTAS ***");
//         printer.printTextWrap(2, 2, 30, 80, txtObsercaciones.getText());
        //printer.printTextWrap(linI, linE, colI, colE, null);

//        printer.printTextWrap(3, 3, 1, 22, "N.ORDEN:" + txtNumeroOrden.getText());
        printer.printTextWrap(3, 3, 1, 60, "FECHA DEL DIA: " + dia + ":" + mes + ":" + año);
        printer.printTextWrap(3, 3, 29, 80, "HORA: " + txtClock.getText());
        printer.printTextWrap(4, 4, 1, 80, "REPARTIDOR: " + txtNombreRepartidor.getText());
        printer.printTextWrap(5, 5, 1, 100, "Le informamos que el repartidor: \n " + txtNombreRepartidor.getText() + "\n usted debe de pagar un total de: $" + txtTotal.getText());
//        printer.printTextWrap(7, 7, 1, 80, "NUMERO DE TELEFONO: " + txtTelefono.getText());
//        printer.printTextWrap(8, 8, 1, 80, "TIPO ENTREGA: " + cmbEntrega.getSelectedItem());
//        printer.printTextWrap(9, 9, 1, 80, ": " + );
        printer.printTextWrap(6, 1, 1, 80, "OBSERVACIONES: " + txtAreaDescripcion.getText());
        printer.printTextWrap(7, 2, 1, 80, "===============================================");//esta bien 
        printer.printTextWrap(8, 2, 12, 80, "------MIS ORDENES------");
        printer.printTextWrap(9, 3, 1, 60, "ID_O   NOMBRE_P          CANTIDAD    $PRECIO$");

        for (int i = 0; i < filas; i++) {
            printer.printTextWrap(10 + i, 2, 1, 80, jTableAsignarRepartidor.getValueAt(i, 0).toString()
                    + "      " + jTableAsignarRepartidor.getValueAt(i, 2).toString()
                    + "\t   " + jTableAsignarRepartidor.getValueAt(i, 3).toString()
                    + "\t       $" + jTableAsignarRepartidor.getValueAt(i, 4).toString());

            /*String pre = printer.alinharADireita(10, jTableAsignarRepartidor.getValueAt(i, 0).toString());
            String pre1 = printer.alinharADireita(10, jTableAsignarRepartidor.getValueAt(i, 2).toString());
            String pre2 = printer.alinharADireita(10, jTableAsignarRepartidor.getValueAt(i, 3).toString());

            String pre3 = printer.alinharADireita(10, jTableAsignarRepartidor.getValueAt(i, 4).toString());

            printer.printTextWrap(10, filas2, 1, 80, pre);
            printer.printTextWrap(10, filas2, 2, 80, pre1);
            printer.printTextWrap(10, filas2, 3, 80, pre2);
            printer.printTextWrap(10, filas2, 4, 80, pre3);*/
        }

        /*
        
        
         for (int j = 0; j < matriz.length; j++) {
                for (int k = 0; k < matriz[j].length; k++) {
                    
        
         printer.printTextWrap(10 + filas2, 2, 1, 80,
                 matriz[j][k] =  jTableAsignarRepartidor.getValueAt(i, 0).toString()//ESTE VALOR ES EL ID          
                            + "      " + jTableAsignarRepartidor.getValueAt(i, 2).toString()//ESTE VALOR ES EL NOMBRE 
                            + "       " + jTableAsignarRepartidor.getValueAt(i, 3).toString()
                            + "      $" + jTableAsignarRepartidor.getValueAt(i, 4).toString();
                 
                 
                 String valor = printer.
                    printer.printTextWrap(10 + i, 2, 1, 80, matriz[j][k]);
                }
            }
        
        
        
         */
        printer.printTextWrap((10 + filas) + 1, 1, 1, 80, "TOTAL A PAGAR:......................$" + txtTotal.getText());//esta bien 

        printer.printTextWrap((10 + filas) + 2, 1, 1, 80, "===============================================");//esta bien 

        printer.toFile("C:\\Users\\Los Gavilanes 2\\Desktop\\tickets\\TicketsRepartidor\\" + txtNombreRepartidor.getText() + ".txt");

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("C:\\Users\\Los Gavilanes 2\\Desktop\\tickets\\TicketsRepartidor\\" + txtNombreRepartidor.getText() + ".txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();

        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);
                DocPrintJob job2 = PrintServiceLookup.lookupDefaultPrintService().createPrintJob();
                byte[] bytes2 = {27, 109, 1};
                DocFlavor flavor2 = DocFlavor.BYTE_ARRAY.AUTOSENSE;
                Doc doc2 = new SimpleDoc(bytes2, flavor2, null);
                job2.print(doc2, null);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("No existen impresoras instaladas");
        }

        inputStream.close();

    }

    @Override
    public void run() {
        Thread ct = Thread.currentThread();

        while (ct == h1) {
            calcula();
            txtClock.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {

            }

        }
    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        java.util.Date fechaHoraActual = new java.util.Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";

        if (ampm.equals("AM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);

        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }
}
